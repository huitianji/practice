gulp介绍

-。什么是gulp
gulp 是可以自动化执行任务的工具。在平时开发的流程里面，一定有一些动作需要手工的重复的去执行。比如
    -。-把一个文件拷贝到另一个位置
    -。-把多个js或者css文件合并成一个文件以减少网络请求数
    -。-对js文件和css进行合并压缩，以减少网络流量
    -。-把sass或者less文件编译成css
    -。-压缩图像文件，以减少网络流量
    -。-创建一个可以实时刷新页面内容的本地服务器等等。
只要你觉得有些动作是要重复去做的，一般你就可以把这些动作创建成一个gulp任务，然后在指定的
条件下，比如文件发生变化以后，自动去执行这些任务。
二。gulp特点
    -。-易于使用 通过代码优于配置策略，gulp让简单的任务简单，负责的任务可管理
    -。-快速构建 利用node.js流的威力，你可以快速构建项目并减少平方的IO操作。前一级的输出，直接变成后一级的输入，使得在操作上非常简单。
    -。-高质量的插件 gulp严格的插件指南确保插件如你期望的那样简洁的工作
    -。-易于学习 通过最少api ,掌握gulp毫不费力，构建工作尽在掌握

grunt --->{
    有很多的临时文件。you 中间步骤
}
gulp --->{
    少了中间步骤。
}

三。资源地址
http://gulpjs.com/
http://www.gulpjs.com.cn/
技巧集http://www.gulpjs.com.cn/docs/recipes/
api --> http://www.gulpjs.com.cn/docs/api/
使用指南 -> http://www.techug.com/gulp
开发教程 -》http://www.w3ctech.com/topic/134
利用gulp处理前端工作流程 http://segmentfault.com/a/1190000003098076#articleHeader0
前端构建工具gulpjs的使用介绍及技巧 http://www.cnblogs.com/2050/p/4198792.html


【二】 什么是流
一。流的概念
    stream 是nodejs各种对象实现的抽象接口
    比如标准输入是一个流，标准输出也是一个流。
    所有的stream对象都是EventEmitter的实例，可以发射事件。
    流是一种有起点和终点的数据传输手段
二。gulp中的流
    -。gulp正是通过流和代码优于配置的策略来尽量简化任务编写的工作
    -。类似jquery 里的链接操作，把各个方法串联起来构建完整的任务
    -。用gulp编写任务也可以看作是用NOde.js编写任务
    -。当使用流时，gulp不需要生产大量的中间文件。只讲最后的输出写入磁盘，整个过程因此变得非常的块

三。gulp命令行工具
    -。使用 npm install 安装gulp,注意加上一个 -g 的参数，表示在全局范围内去安装
    -。一般用npm安装的时候用一个-g的参数表示，这个安装的东西会作为命令去执行
    -。如果你在mac 或linux下遇到权限问题，在下面这个命令的前面加上sudo npm insstall gulp -g
    并输入mac密码


    npm install -g gulp

    安装完成后可以输入 gulp --help
    如果输出一些帮助的形象就表示可以gulp命令行成功安装了。

    安装处问题。。
    -。 淘宝源
        npm install -g gulp --registry=http://registry.npm.taobao.org
    -。 中国源
        npm install -g gulp --registry=http://registry.cnpmjs.org
    -。官方源
        npm install -g gulp --registry=http://www.npmjs.org/

五。gulp 运行
    一。创建配置文件
        gulp的任务要放到一个叫gulpfile.js的文件里面，先在项目的根目录下面创建一个这样的文件
        然后在这个文件的顶部添加下面代码：
        var gulp = require("gulp");
        通过require可以把gulp模块引入当前项目并赋值给gulp变量
        这样，gulp这个变量里面就会拥有gulp的所有的方法了
    二。创建gulp任务
    可以使用gulp的task方法。
    第一个参数是任务的名称，第二个参数是任务的定义，是一个匿名函数
    gulp.task('hello',function(){
        console.log("hello");
    });

    执行gulp任务
    gulp hello
    gulp后面跟着的是任务的名称，不输入任务名称的话会默认找default任务，找不到会报错

   三。执行其他任务
   可以使用
   gulp <task> <othertask>
六。gulp命令行
    gulp--参数标识
    -o -v或者 --version 会显示全局和项目本地所安装的gulp版本号
    -。--gulpfile 手动指定一个 gulpfile的路径，这在你有很多个gulpfile的时候很有用。
    这也会将CWD设置到该gulpfile所以在目录
    -。 --cwd dirpath 手动指定 cwd。定义gulpfile查找的位置，此外，所有的相应的依赖（require）
    会从这里开始计算相对路径
    -。 -T 或者 --tasks 会显示所指定的gulpfile的tasks依赖树

    -。 --tasks-simple会以单纯文本的方式显示所有载入的gulpfile中的task列表
    -。--color强制gulp和gulp插件显示颜色，即使没有颜色支持
    -。--no-color强制不显示颜色，即便检测到有颜色支持
    -。 --silent禁止所有的gulp日志

八。 gulp.src
    使用gulp，仅需知道4个api即可：
    gulp.task(),gulp.src(),gulp.dest(),gulp.watch(),所以很容易就能掌握

    gulp.src();
    在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream,然后可以通过stream的
    pipe()方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，
    淡入也可以把流写如果到文件中。所以gulp是以stream为媒介的。它不需要频繁的生成临时文件，这也是gulp
    的速度比grunt块的一个原因。gulp.src方法正是用来获取流的，但呀哦组有这个流里面的内容不是原生的文件流，二是一个虚拟文件
    对象流（vinyl files），这个虚拟文件对象重存储着原始文件的路径文件名。内容等信息。
    这个我们暂时不用去深入理解。
    。
    gulp.src(globas[,options])

    globs参数是文件匹配模式（类似正则表达式），用来匹配文件路径（包括文件名），当然这里也可以直接指定某个
    具体的文件路径、当有多个匹配模式时，该参数可以为一个数组。
    options 为可选参数。

    gulp.dest()方法是用来写文件的。
    gulp.dest(path[,options])
    path->写入文件的路径
    options-》可选参数

    gulp的使用流程一般是：手写通过gulp.src()方法获取到我们想要处理的文件流，
    然后把文件流公告pipe方法导入到gulp的插件中，最后把经过插件处理后的流再通过pipe方法导入到
    gulp.dest()中；
    gulp.dest（）方法则把流中的内容写入到文件中。
    这里首先需要弄清楚一点是。我们给gulp.dest()传入的路径参数。只能用来指定要生成的文件的目录
    ，
    二不是指定生成文件的文件名，它生成文件的文件名使用的是导入套它的文件流自身的文件名
    var gulp = require("gulp");

    gulp.task('default',function(){
        gulp.src(['app/src.js','app/src2.js'])//获取文件的流api
             .pipe(gulp.dest('dist'));//写入文件的api
    });

    生成的文件路径与我们给gulp.dest()方法出入的路径参数之间的关系。
    gulp.task('default',function(){
        gulp.src(['app/bootstrap/*.js','!app/jquery/*.js'],{base:"app"})//有通配符开始出现的那部分路径为 '**/*.js'
             .pipe(gulp.dest('dist'));//最后生成的文件路径为 dist/**/*.js
        //如果 **/*。js 匹配到的文件为 jquery/jquery.js,则生成的文件路径为dist/jquery/jquery.js
    });

    当我们没有在gulp.src()方法中配置base属性时，base默认值为通配符开始出现之前那部分路径。如：
    gulp.src('app/src/**/*.css')//此时的base的值为app/src

    gulp.task()
    语法：
    gulp.task方法用来定义任务
    gulp.task(name[,deps],fn);
    {
        name为任务名
        deps 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务
        执行完毕后才开始执行。如果没有依赖，则可以省略这个参数
        fn 为任务函数，我们把任务要执行的代码都写在里面。该参数也是可选的
    }

    gulp.watch()
    监控文件的变化
    gulp.wach(glob,[,opts],tasks)
    glob为监控的文件匹配模式，规则和用法与sulp.src()方法中的glob相同
    opts为一个可以选的配置对象，通常不需要用到
    task 为文件变化后要执行的任务，为一个数组
    gulp.task('1',function(){
    })

    gulp.task('2',function(){
        })
    gulp.task('default',['1','2],function(){//依赖 1  2  3

            })

    --[gulp.watch()还有另外一种使用方法]-----------------------
    gulp.watch(glob[,opts,cb]);
    glob和opts参数与第一种用法相同
    "cb"参数为一个函数。每当监视的文件发生变化时，就会调用这个函数，并且会给它传入一个对象，
    该对象包含了文件变化的一些信息，type属性为变化的类型，可以是 added ,changeed,deleted;
    path属性为发生变化的文件的路径

    gulp.watch('js/**/*.js',function(event){
        console.log(event.type);//变化类型  added为新增，deleted为删除，changed为改变
        console.log(event.path);//变化的文件的路径
    });




































